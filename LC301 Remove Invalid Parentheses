
class Solution {
    public List<String> removeInvalidParentheses(String s) {
        HashSet<String> set = new HashSet<>();
        int rmL=0, rmR=0;
        for(char c : s.toCharArray()) {
            if(c=='(') {
                rmL++;
            } else if(c == ')') {
                if(rmL > 0) {
                    rmL--;
                } else {
                    rmR++;
                }
            }
        }
        dfs(set, s, 0, rmL, rmR, 0, new StringBuilder());
        return new ArrayList<String>(set);
    }
    
    private void dfs(Set<String> set, String s, int idx, int rmL, int rmR, int delta, StringBuilder sb) {
        if(idx==s.length() && rmL==0 && rmR==0 && delta == 0) {
            set.add(sb.toString());
            return;
        }
        if(idx>=s.length() || rmL<0 || rmR<0 || delta<0) return;
        char c = s.charAt(idx);
        if(c=='(') {
            dfs(set, s, idx+1, rmL-1, rmR, delta, sb);
            sb.append('(');
            dfs(set, s, idx+1, rmL, rmR, delta+1, sb);
            sb.setLength(sb.length()-1);
        } else if(c==')') {
            dfs(set, s, idx+1, rmL, rmR-1, delta, sb);
            sb.append(')');
            dfs(set, s, idx+1, rmL, rmR, delta-1, sb);
            sb.setLength(sb.length()-1);
        } else {
            sb.append(c);
            dfs(set, s, idx+1, rmL, rmR, delta, sb);
            sb.setLength(sb.length()-1);
        }
    }
}


time: unknown
space: O(n)
