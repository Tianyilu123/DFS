
class Solution {
    int[][] dirs = {{-1,0},{0,1},{1,0},{0,-1}};
    public int numDistinctIslands(int[][] grid) {
        if(grid == null || grid.length == 0 || grid[0] == null || grid[0].length == 0) return 0;
        int row = grid.length, col = grid[0].length;
        HashSet<String> set = new HashSet<>();
        int res = 0;
        
        for(int i=0; i<row; i++) {
            for(int j=0; j<col; j++) {
                if(grid[i][j] == 1) {
                    StringBuilder sb = new StringBuilder();
                    dfs(grid, i, j, 0, 0, sb);
                    String s = sb.toString();
                    if(!set.contains(s)) {
                        set.add(s);
                        res++;
                    }
                }
            }
        }
        return res;
    }
    
    private void dfs(int[][] grid, int i, int j, int xpos, int ypos, StringBuilder sb) {
        int row = grid.length, col = grid[0].length;
        grid[i][j] = 0;
        sb.append(xpos+"-"+ypos);
        for(int[] dir: dirs) {
            int ii = i+dir[0];
            int jj = j+dir[1];
            if(ii<0 || ii>=row || jj<0 || jj>=col || grid[ii][jj] == 0) continue;
            dfs(grid, ii, jj, xpos+dir[0], ypos+dir[1], sb);
        }
    }
}


Time Complexity: O(m*n). m = grid.length. n = grid[0].length.

Space: O(m*n). stack space.
