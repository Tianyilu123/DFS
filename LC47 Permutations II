
class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        if(nums == null || nums.length == 0)
            return res;
        Arrays.sort(nums);
        List<Integer> list = new ArrayList<Integer>();
        boolean[] visited = new boolean[nums.length];
        this.helper(nums, list, res, visited);
        
        return res;
    }
    
    private void helper(int[] nums, List<Integer> list, List<List<Integer>> res, boolean[] visited) {
        if(nums.length == list.size()) {
            res.add(new ArrayList<Integer>(list));
            return;
        }
        for(int i=0; i<nums.length; i++) {
            if(visited[i]) {
                continue;
            }
            visited[i] = true;
            list.add(nums[i]);
            this.helper(nums, list, res, visited);
            visited[i] = false;
            list.remove(list.size()-1);
            while(i<nums.length-1 && nums[i] == nums[i+1]) {
                i++;
            }
        }
    }
}
