
class Solution {
    public List<String> restoreIpAddresses(String s) {
        List<String> res = new ArrayList<>();
        if(s == null || s.length() == 0) return res;
        dfs(res, s, new StringBuilder(), 0, 0);
        
        return res;
    }
    
    private void dfs(List<String> res, String s, StringBuilder path, int idx, int part) {
        int len = s.length();
        if(idx == len && part == 4) {
            path.setLength(path.length()-1);
            res.add(path.toString());
            return;
        }
        if(idx == len || part == 4) return;
        
        for(int i=1; i<=3; i++) {
            if(idx + i > s.length()) break;
            String ss = s.substring(idx, idx+i);
            int val = Integer.valueOf(ss);
            
            if(val >= 0 && val <= 255) {
                int lenP = path.length();
                path.append(val + ".");
                dfs(res, s, path, idx+i, part+1);
                path.setLength(lenP);
            }
            if(val == 0 && i == 1) break;
        }
        
    }
}

time : O(3^4) = O(1)
space: O(n)
