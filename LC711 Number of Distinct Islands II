class Solution {
    public int numDistinctIslands2(int[][] grid) {
        if(grid == null || grid.length == 0 || grid[0] == null || grid[0].length == 0) return 0;
        HashSet<String> set = new HashSet<>();
        int[][] dirs = {{-1,0},{1,0},{0,-1},{0,1}};
        int[][] trans = {{-1,1},{1,-1},{-1,-1},{1,1}};
        
        int row = grid.length, col = grid[0].length;
        for(int i=0; i<row; i++) {
            for(int j=0; j<col; j++) {
                if(grid[i][j] == 1) {
                    List<int[]> cells = new ArrayList<>();
                    dfs(i,j,grid,cells,dirs);
                    String key = normalize(cells, trans);
                    set.add(key);
                }
            }
        }
        return set.size();
    }
    
    private void dfs(int i, int j, int[][] grid, List<int[]> cells, int[][] dirs) {
        int row = grid.length, col = grid[0].length;
        grid[i][j] = 0;
        cells.add(new int[]{i,j});
        for(int[] dir : dirs) {
            int ii = i+dir[0];
            int jj = j+dir[1];
            
            if(ii>=0 && ii<row && jj>=0 && jj<col && grid[ii][jj] == 1)
                dfs(ii, jj, grid, cells, dirs);
        }
    }
    
    private String normalize(List<int[]> cells, int[][] trans) {
        List<String> forms = new ArrayList<>();
        for(int[] tran: trans) {
            List<int[]> rotate = new ArrayList<>();
            List<int[]> reflect = new ArrayList<>();
            
            for(int[] cell: cells) {
                int x = cell[0];
                int y = cell[1];
                
                rotate.add(new int[] {x*tran[0], y*tran[1]});
                reflect.add(new int[] {y*tran[0], x*tran[1]});
            }
            forms.add(getKey(rotate));
            forms.add(getKey(reflect));
        }
        Collections.sort(forms);
        return forms.get(0);
    }
    
    private String getKey(List<int[]> cells) {
        // Sort the cells and the take the first cell in sorted order as the origin
        Collections.sort(cells, new Comparator<int[]>() {
            @Override
            public int compare(int[] a, int[] b) {
                return a[0] == b[0] ? a[1] - b[1] : a[0] - b[0];
            }
        });
        
        StringBuilder key = new StringBuilder();
        int originX = cells.get(0)[0];
        int originY = cells.get(0)[1];
        // generarte key
        for(int[] cell : cells) {
            if(key.length() == 0)
                key.append((cell[0]-originX)+"-"+(cell[1]-originY));
            else if(key.length() != 0)
                key.append("->"+(cell[0]-originX)+"-"+(cell[1]-originY));
        }
        return key.toString();
    }
}


