// method 1:

class Solution {
    public int numIslands(char[][] grid) {
        if(grid == null || grid.length == 0 || grid[0] == null) return 0;
        int row = grid.length;
        int col = grid[0].length;
        int count = 0;
        for(int i=0; i<row; i++) {
            for(int j=0; j<col; j++) {
                if(grid[i][j] == '1') {
                    count++;
                    dfs(grid, i, j);
                }
            }
        }
        return count;
    }
    
    private void dfs(char[][] grid, int i, int j) {
        int row = grid.length, col = grid[0].length;
        int[][] dirs = {{1,0},{-1,0},{0,1},{0,-1}};
        grid[i][j] = '0';
        for(int[] dir : dirs) {
            int ii = i+dir[0];
            int jj = j+dir[1];
            if(ii>=0 && ii<row && jj>=0 && jj<col && grid[ii][jj] == '1') {
                dfs(grid, ii, jj);
            }
        }
    }
}


Time complexity : O(M×N) where M is the number of rows and N is the number of columns.

Space complexity : worst case O(1) in case that the grid map is filled with lands where DFS goes by M×N deep.


// method 2, BFS :

class Solution {
    int[][] dirs =  {{1,0}, {-1,0}, {0, 1}, {0,-1}};
    public int numIslands(char[][] grid) {
        if(grid == null || grid.length == 0 || grid[0] == null || grid[0].length == 0)
            return 0;
        int count = 0;
        
        for(int i=0; i<grid.length; i++) {
            for(int j=0; j<grid[0].length; j++) {
                if(grid[i][j] == '1') {
                    bfs(grid, i, j);
                    count++;
                }
            }
        }
        return count;
    }
    
    private void bfs(char[][] grid, int i, int j) {
        grid[i][j] = '0';
        int row = grid.length, col = grid[0].length;
        LinkedList<Integer> queue = new LinkedList<>();
        
        int code = i*col + j;
        queue.offer(code);
        
        while(!queue.isEmpty()) {
            code = queue.poll();
            i = code / col;
            j = code % col;
            
            for(int[] dir : dirs) {
                int ii = i + dir[0];
                int jj = j + dir[1];
                
                if(isValid(ii, jj, grid)) {
                    grid[ii][jj] = '0';
                    code = ii*col + jj;
                    queue.offer(code);
                }
            }
        }
    }
    
    private boolean isValid(int ii, int jj, char[][] grid) {
        int row = grid.length, col = grid[0].length;
        if(ii>=0 && ii<row && jj>=0 && jj<col && grid[ii][jj] == '1')
            return true;
        return false;
    }
}
