
class Solution {
    public boolean exist(char[][] board, String word) {
        if(board == null || board.length == 0) return false;
        int row = board.length;
        int col = board[0].length;
        for(int i=0; i<row; i++) {
            for(int j=0; j<col; j++) {
                if(helper(board, word, i,j,0,new boolean[row][col]))
                    return true;
            }
        }
        return false;
    }
    
    private boolean helper(char[][] board, String word, int i, int j, int idx, boolean[][] visited) {
        if(idx == word.length()) {
            return true;
        }
        int row = board.length;
        int col = board[0].length;
        boolean res = false;
        if(i>=0 && i<row && j>=0 && j<col && board[i][j] == word.charAt(idx) && !visited[i][j]) {
            visited[i][j] = true;
            res = helper(board, word, i-1, j, idx+1, visited) ||
            helper(board, word, i, j+1, idx+1, visited) ||
            helper(board, word, i+1, j, idx+1, visited) ||
            helper(board, word, i, j-1, idx+1, visited);
            visited[i][j] = false;
        }
        return res;
    }
}

time: m*n*4^(k-1) = m*n*4^k
space: m X n is board size, k is word size.
recuision最深是k层，recursive部分空间复杂度应该是O(k) + O(m*n)(visit array)
