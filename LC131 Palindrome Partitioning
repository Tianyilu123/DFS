// method 1: original

class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        if(s == null || s.length() == 0) return res;
        helper(res, new ArrayList<>(), s);
        return res;
    }
    
    private void helper(List<List<String>> res, List<String> tmp, String s) {
        if(s.length() == 0) {
            res.add(new ArrayList<>(tmp));
            return;
        }
        
        for(int i=0; i<s.length(); i++) {
            if(isPal(s.substring(0, i+1))) {
                tmp.add(s.substring(0, i+1));
                helepr(res, tmp, s.substring(i+1));
                tmp.remove(list.size()-1);
            }
        }
    }
    
    private boolean isPal(String str) {
        for(int i=0; i<s.length()/2; i++) {
            if(s.charAt(i) != s.charAt(s.length()-1-i)) {
                return false;
            }
        }
        return true;
    }
}

// time: O(2^n)
//space: O(n)

// method 2: 

class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        if(s == null || s.length() == 0) return res;
        List<String> list = new ArrayList<>();
        helper(res, list, s, 0);
        return res;
    }
    
    private void helper(List<List<String>> res, List<String> list, String s, int idx) {
        if(idx == s.length()) {
            res.add(new ArrayList<>(list));
            return;
        }
        
        for(int i=idx; i<s.length(); i++) {
            String sub = s.substring(idx, i+1);
            if(isPal(sub)) {
                list.add(sub);
                helper(res, list, s, i+1);
                list.remove(list.size()-1);
            }
        }
    }
    
    private boolean isPal(String str) {
        int len = str.length();
        for(int i=0; i<len; i++) {
            if(str.charAt(i) != str.charAt(len-i-1))
                return false;
        }
        return true;
    }
}

// time: O(2^n)
// space: O(n)
